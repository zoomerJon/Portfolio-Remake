/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: akshatmittal (https://sketchfab.com/akshatmittal)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/2021-macbook-pro-14-m1-pro-m1-max-f6b0b940fb6a4286b18a674ef32af2d3
title: 2021 Macbook Pro 14" (M1 Pro / M1 Max)
*/

import React, { lazy, useEffect, useRef, useState, forwardRef } from "react";
import * as THREE from "three";
import { useFrame, useThree } from "@react-three/fiber";
import { Html, useGLTF } from "@react-three/drei";
const WebPage = lazy(() => import("../WebPage/WebPage.jsx"));
// import WebPage from "../WebPage/WebPage.jsx";
import gsap from "gsap";

export default forwardRef(function Model(props, ref) {
  const { nodes, materials } = useGLTF("/mac-v1.glb");

  const group = useRef();
  const state = new useThree();
  let yTranslation;

  yTranslation = props.mobile ? 0.01 : 0.005;

  useEffect(() => {
    if (props.laptopActive && !props.mobile) {
      // document.getElementById("profile").classList.add("hide");
      gsap.to(".test", {
        y: -450,
        duration: 2,
      });
      gsap.to(state.camera.position, {
        z: 2.25,
        duration: 1.25,
      });
      gsap.to(state.camera.position, {
        y: 1.5,
        duration: 1.25,
      });
    } else if (props.laptopActive && props.mobile) {
      gsap.to(".test", {
        y: -450,
        duration: 2,
      });
      gsap.to(state.camera.position, {
        z: 3.75,
        duration: 1.25,
      });
      gsap.to(state.camera.position, {
        y: 1.5,
        duration: 1.25,
      });
    } else if (!props.laptopActive && !props.mobile) {
      gsap.to(".test", {
        y: 0,
        duration: 2,
      });
      gsap.to(state.camera.position, {
        z: 8,
        duration: 2,
      });
      gsap.to(state.camera.position, {
        y: 2.95,
        duration: 2,
      });
    } else if (!props.laptopActive && props.mobile) {
      gsap.to(".test", {
        y: 0,
        duration: 2,
      });
      gsap.to(state.camera.position, {
        z: 10,
        duration: 2,
      });
      gsap.to(state.camera.position, {
        y: 4,
        duration: 2,
      });
    }
  }, [props.laptopActive]);

  return (
    <group {...props} dispose={null} ref={ref}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <mesh
            geometry={nodes.WeTEPJkcTkMBwBo.geometry}
            material={materials.lbGSuJJwEsUTzIm}
          />
          <mesh
            geometry={nodes.yxTDdMZViYkuOKm.geometry}
            material={materials.BczvixNfkWQzRzZ}
          />
          <mesh
            // Webcam Mesh
            // position={[0, 2, 0]}
            geometry={nodes.pPCeNYAcgHQGnfB.geometry}
            material={materials.jRMWtdSAaujlvUA}
          ></mesh>
          <mesh
            geometry={nodes.CpRxqsFibJhVZKA.geometry}
            material={materials.CGiumILqqSMVyeb}
          />
          <mesh
            // position={[0, 2, 0]}
            geometry={nodes.abgVijaHVNRUvcc.geometry}
            material={materials.UpOvKwLUUXPmnPU}
          >
            <Html
              rotation-x={-Math.PI / 8.8}
              position={[0, 10.28, -15.5]}
              // scale={[2.433, 2.4467, 2.4]}
              scale={[1.2165, 1.22335, 1.2]}
              // scale={[3.65, 3.67, 3.6]}
              transform
              occlude
              className="content-mac mac"
            >
              <WebPage screen={"desktop"} />
            </Html>
            {/* <Html position={!active ? [0, 27, 0] : [0, 23, 0]}>
                <div
                  onClick={() => {
                    setActive(!active);
                  }}
                  className="view-button"
                >
                  View Projects
                </div>
              </Html> */}
          </mesh>
          <mesh
            geometry={nodes.CEvArJuvvmtQsgk.geometry}
            material={materials.yVmFXNTCIwNkqVT}
          />
          <mesh
            geometry={nodes.aUVveCqqwsqchVB.geometry}
            material={materials.yVmFXNTCIwNkqVT}
          />
          <mesh
            geometry={nodes.fiqlelggeOoTUAw.geometry}
            material={materials.SELuppcPLrlTpBi}
          />
          <mesh
            geometry={nodes.zlRXoydEgBQgFUa.geometry}
            material={materials.zqeFZcIteZtOShc}
          />
          <mesh
            geometry={nodes.YvEVHGlTGUxXlGj.geometry}
            material={materials.initialShadingGroup}
          />
          <mesh
            geometry={nodes.FnbkdmFKVeCCxTX.geometry}
            material={materials.ZpTrUizuxJQUyzW}
          />
          <mesh
            geometry={nodes.ehiyYGFzDbgxhiD.geometry}
            material={materials.LJSCtLIrHNHZnIH}
          />
          <mesh
            geometry={nodes.NhThIZELXlNUoIr.geometry}
            material={materials.mpJhsaJJZPPWMEX}
          />
          <mesh
            geometry={nodes.RYgQzNzcnFbacQH.geometry}
            material={materials.VfcxYmbOfnqunYx}
          />
          <mesh
            geometry={nodes.JtnJKXAEPaOoepM.geometry}
            material={materials.lbGSuJJwEsUTzIm}
          />
          <mesh
            geometry={nodes.UxiDBlCRfXiMBzT.geometry}
            material={materials.zWLcvvnJhbcTEtJ}
          />
          <mesh
            geometry={nodes.NgmQYtxXWDmCavo.geometry}
            material={materials.SKOFticEGTqECbB}
          />
          <mesh
            geometry={nodes.PSIiVLWbMOjTmDb.geometry}
            material={materials.SKOFticEGTqECbB}
          />
          <mesh
            // keys
            geometry={nodes.RkSurqpnfNMQZfv.geometry}
            material={materials.zWLcvvnJhbcTEtJ}
          />
          <mesh
            geometry={nodes.YJMoQnvBNpTrgeH.geometry}
            material={materials.PCfVLhSpFVCvRmc}
          />
          <mesh
            geometry={nodes.KCEhahuknsxQOxv.geometry}
            material={materials.HpEeGHRuOqfcIZU}
          />
          <mesh
            geometry={nodes.tEHnKyDsqJuxIpz.geometry}
            material={materials.yVmFXNTCIwNkqVT}
          />
          <mesh
            geometry={nodes.TCGsaoyNbPKzeSS.geometry}
            material={materials.yVmFXNTCIwNkqVT}
          />
          <mesh
            geometry={nodes.DAuseNOrQKyrxKl.geometry}
            material={materials.yVmFXNTCIwNkqVT}
          />
          <mesh
            geometry={nodes.SjXIFRJFXEqYDUr.geometry}
            material={materials.PCfVLhSpFVCvRmc}
          />
          <mesh
            //keys frame
            geometry={nodes.eAcvqfZlEdoxHsj.geometry}
            material={materials.IlNnjEDxsExlBOr}
          />
          <mesh
            geometry={nodes.gkxaPoMYYRpyVMR.geometry}
            material={materials.iPZiEncThgnBMJv}
          />
          <mesh
            geometry={nodes.xlRLalLTesirCGW.geometry}
            material={materials.hPcehRUjcLAosED}
          />
          <mesh
            geometry={nodes.ZlizOzukFeXwbga.geometry}
            material={materials.kOcboIDeohDRqCf}
          />
          <mesh
            geometry={nodes.wXiLpiodZWNDroe.geometry}
            material={materials.HPAOpCInJKBtaOC}
          />
          <mesh
            geometry={nodes.PTxrSKzcEmHVtif.geometry}
            material={materials.VfcxYmbOfnqunYx}
          />
          <mesh
            geometry={nodes.RjGOdbHqvxkiDns.geometry}
            material={materials.lbGSuJJwEsUTzIm}
          />
          <mesh
            geometry={nodes.WPFmzKypKbUYgQT.geometry}
            material={materials.lbGSuJJwEsUTzIm}
          />
          <mesh
            geometry={nodes.QHqPxKdexBoFnAK.geometry}
            material={materials.zaEqorbaeeADKgU}
          />
          <mesh
            // trackpad
            geometry={nodes.NWErafhynAfYQEz.geometry}
            material={materials.pZbDFXVUkfRwjmQ}
          />
          <mesh
            geometry={nodes.tEwRkclpxjXZzil.geometry}
            material={materials.UPMcPXFSRXevSGt}
          />
          <mesh
            // keyboard letters/numbers
            geometry={nodes.QYMcPaZnXQfyXcJ.geometry}
            material={materials.NQXltfOcKPZPQdI}
          />
          <mesh
            geometry={nodes.piXptsgcOfaGWrM.geometry}
            material={materials.WLATjirhQCUYAAG}
          />
          <mesh
            geometry={nodes.SjSNuZdtWKZRuoq.geometry}
            material={materials.mpJhsaJJZPPWMEX}
          />
          <mesh
            // keyboard
            geometry={nodes.QFFLzaWPRnuQYJR.geometry}
            material={materials.hPcehRUjcLAosED}
          />
          <mesh
            geometry={nodes.xjTvBwZFGvSMOud.geometry}
            material={materials.hPcehRUjcLAosED}
          />
          <mesh
            geometry={nodes.VqfccLWHjnpnmIO.geometry}
            material={materials.BMKLbAPYqPmfArt}
          />
          <mesh
            geometry={nodes.mUrIWHenIQKVHcb.geometry}
            material={materials.BMKLbAPYqPmfArt}
          />
          <mesh
            geometry={nodes.NdRhLFCrSxRNTxn.geometry}
            material={materials.BMKLbAPYqPmfArt}
          />
          <mesh
            geometry={nodes.vivXPkdlqllUnrl.geometry}
            material={materials.XNDkEZQapqqDHpk}
          />
          <mesh
            geometry={nodes.rIsAbujsARaHSub.geometry}
            material={materials.jAWKNAaRBMlZYro}
          />
          <mesh
            geometry={nodes.QMBrsnrwfcVKELm.geometry}
            material={materials.VqwNZwmDotIMflD}
          />
          <mesh
            geometry={nodes.NqLxSKdAypgOdPC.geometry}
            material={materials.initialShadingGroup}
          />
          <mesh
            geometry={nodes.guoofBSjCEiTIJr.geometry}
            material={materials.JjuwNKnMBUdtRLb}
          />
          <mesh
            geometry={nodes.jvyJQHpRnZNPEYh.geometry}
            material={materials.LJSCtLIrHNHZnIH}
          />
        </group>
      </group>
    </group>
  );
});

useGLTF.preload("/mac-v1.glb");
